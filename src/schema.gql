# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type UserAdditionalDocument {
  name: String
  note: String
  file: String
}

type UserPaymentInformation {
  type: String
  providerName: String
}

type User {
  _id: ID!
  name: String
  contactNumbers: [String!]
  avatar: String
  email: String!
  additionalDocuments: [UserAdditionalDocument!]
  paymentInformations: [UserPaymentInformation!]
  domain: USER_DOMAIN
}

enum USER_DOMAIN {
  OWNER
  PROPERTY_OWNER
  UNIT_OWNER
  MANAGER
  SECURITY_GUARD
}

type UserEdge {
  cursor: String!
  node: User!
}

type UserPagination {
  edges: [UserEdge!]
  nodes: [User!]
  totalCount: Int!
  hasNextPage: Boolean!
}

type FixedCost {
  name: String!
  amount: Int!
  note: String!
}

type PropertyOwner {
  owner: User!
  ownershipPercentage: Int!
}

type PropertyServiceProvider {
  name: String!
  type: SERVICE_PROVIDER_TYPE
  note: String
}

enum SERVICE_PROVIDER_TYPE {
  SECURITY
  CLEANING
  MAINTENANCE
  OTHER
}

type Property {
  _id: ID!

  """Property name"""
  name: String!
  address: String
  numberOfUnits: Int
  defaultUnitRentAmount: Int
  type: PROPERTY_TYPE
  photos: [String!]
  owners: [PropertyOwner!]
  managers: [User!]
  serviceProviders: [PropertyServiceProvider!]
  variableCosts: [String!]
  fixedCosts: [FixedCost!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum PROPERTY_TYPE {
  APARTMENT
  HOUSE
  COMMERCIAL
  INDUSTRIAL
  OFFICE
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Query {
  users(input: UserListQueryDto!): UserPagination!
  property(id: Int!): Property!
}

input UserListQueryDto {
  take: Int!
  offset: Int!
  after: String
  sort: SortType
  sortBy: String
  where: CommonMatchInput
}

enum SortType {
  ASC
  DESC
}

input CommonMatchInput {
  key: String!
  operator: MatchOperator!
  value: String
}

enum MatchOperator {
  eq
  ne
  gt
  gte
  lt
  lte
  in
  nin
  exists
  contains
  notContains
  containsInsensitive
  startsWith
  endsWith
  regex
}

type Mutation {
  createUser(input: CreateUserDTO!): User!
  createProperty(input: CreatePropertyInput!): Property!
  updateProperty(updatePropertyInput: UpdatePropertyInput!): Property!
  removeProperty(id: String!): Property!
}

input CreateUserDTO {
  name: String!
  email: String!
  avatar: String
  contactNumbers: [String!]
  additionalDocuments: [UserAdditionalDocumentDTO!]
}

input UserAdditionalDocumentDTO {
  name: String
  note: String
  file: String
}

input CreatePropertyInput {
  """Property name"""
  name: String!
  address: String
  numberOfUnits: Int
  defaultUnitRentAmount: Int
  type: PROPERTY_TYPE
  photos: [String!]
  ownerIds: [String!]
  managerIds: [String!]
  serviceProviders: [PropertyServiceProviderInput!]
  variableCosts: [String!]
  fixedCosts: [FixedCostInput!]
}

input PropertyServiceProviderInput {
  name: String!
  type: SERVICE_PROVIDER_TYPE
  note: String
}

input FixedCostInput {
  name: String!
  amount: Int!
  note: String!
}

input UpdatePropertyInput {
  """Property name"""
  name: String
  address: String
  numberOfUnits: Int
  defaultUnitRentAmount: Int
  type: PROPERTY_TYPE
  photos: [String!]
  ownerIds: [String!]
  managerIds: [String!]
  serviceProviders: [PropertyServiceProviderInput!]
  variableCosts: [String!]
  fixedCosts: [FixedCostInput!]
  id: String!
}